
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class verEmpleados extends javax.swing.JFrame {

    private JTable tabla;
    private JButton botonRegresar;
    private JButton botonActualizar;
    private EmpleadoTableModel modeloTabla;

    public verEmpleados() {
        super("Lista de Empleados");

        try {
            // Crear un modelo de tabla personalizado
            modeloTabla = new EmpleadoTableModel();
            tabla = new JTable(modeloTabla);

            // Configurar el ancho de la columna "Dirección"
            TableColumnModel columnModel = tabla.getColumnModel();
            columnModel.getColumn(3).setPreferredWidth(150); // Ajusta el valor según tus necesidades

            // Configurar el diseño de la interfaz
            setLayout(new BorderLayout());
            add(new JScrollPane(tabla), BorderLayout.CENTER);

            // Botones
            botonActualizar = new JButton("Actualizar Datos");
            botonActualizar.addActionListener(this::mostrarVentanaActualizar);
            botonRegresar = new JButton("Regresar");
            botonRegresar.addActionListener(e -> {
                SwingUtilities.invokeLater(() -> {
                    MenuEmp menuGAD = new MenuEmp();
                    menuGAD.setVisible(true);
                });
            });

            JPanel panelBotones = new JPanel();
            panelBotones.add(botonActualizar);
            panelBotones.add(botonRegresar);

            add(panelBotones, BorderLayout.SOUTH);

            // Configurar la ventana
            setSize(800, 600);
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setLocationRelativeTo(null); // Centrar la ventana
            setVisible(true);

            // Cargar datos al iniciar la ventana
            cargarDatos();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void cargarDatos() {
        // Limpiar el modelo actual
        modeloTabla.clear();

        try {
            Connection conexion = Conexion.obtenerConexion();
            Statement statement = conexion.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM EMPLEADO");

            // Agregar filas a la tabla desde el resultado de la consulta
            while (resultSet.next()) {
                int idEmpleado = resultSet.getInt("id_empleado");
                String nombre = resultSet.getString("nombre");
                String apellido = resultSet.getString("apellidos");
                String direccion = resultSet.getString("direccion");
                String telefono = resultSet.getString("telefono");
                String fechaNacimiento = resultSet.getString("fecha_nacimiento");
                modeloTabla.addEmpleado(new Empleado(idEmpleado, nombre, apellido, direccion, telefono, fechaNacimiento));
            }

            // Cerrar la conexión después de usarla
            resultSet.close();
            statement.close();
            conexion.close();

            // Notificar al modelo que los datos han cambiado
            modeloTabla.fireTableDataChanged();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void mostrarVentanaActualizar(ActionEvent event) {
        int filaSeleccionada = tabla.getSelectedRow();

        if (filaSeleccionada != -1) {
            // Obtener los datos de la fila seleccionada
            Empleado empleadoSeleccionado = modeloTabla.getEmpleado(filaSeleccionada);

            // Crear una nueva interfaz para actualizar datos
            SwingUtilities.invokeLater(() -> new VentanaActualizar(empleadoSeleccionado, this));
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona un empleado para actualizar sus datos.");
        }
    }

    // Método para actualizar la tabla en tiempo real
    public void actualizarTabla() {
        cargarDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        SwingUtilities.invokeLater(verEmpleados::new);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

class Empleado {

    private int idEmpleado;
    private String nombre;
    private String apellido;
    private String direccion;
    private String telefono;
    private String fechaNacimiento;

    public Empleado(int idEmpleado, String nombre, String apellido, String direccion, String telefono, String fechaNacimiento) {
        this.idEmpleado = idEmpleado;
        this.nombre = nombre;
        this.apellido = apellido;
        this.direccion = direccion;
        this.telefono = telefono;
        this.fechaNacimiento = fechaNacimiento;
    }

    public int getIdEmpleado() {
        return idEmpleado;
    }

    public String getNombre() {
        return nombre;
    }

    public String getApellido() {
        return apellido;
    }

    public String getDireccion() {
        return direccion;
    }

    public String getTelefono() {
        return telefono;
    }

    public String getFechaNacimiento() {
        return fechaNacimiento;
    }
}

class EmpleadoTableModel extends AbstractTableModel {

    private List<Empleado> empleados;
    private String[] columnNames = {"ID Empleado", "Nombre", "Apellido", "Dirección", "Teléfono", "Fecha de Nacimiento"};

    public EmpleadoTableModel() {
        this.empleados = new ArrayList<>();
    }

    public void addEmpleado(Empleado empleado) {
        empleados.add(empleado);
        fireTableRowsInserted(empleados.size() - 1, empleados.size() - 1);
    }

    public void removeEmpleado(int rowIndex) {
        empleados.remove(rowIndex);
        fireTableRowsDeleted(rowIndex, rowIndex);
    }

    public Empleado getEmpleado(int rowIndex) {
        return empleados.get(rowIndex);
    }

    public void clear() {
        empleados.clear();
        fireTableDataChanged();
    }

    @Override
    public int getRowCount() {
        return empleados.size();
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Empleado empleado = empleados.get(rowIndex);
        switch (columnIndex) {
            case 0:
                return empleado.getIdEmpleado();
            case 1:
                return empleado.getNombre();
            case 2:
                return empleado.getApellido();
            case 3:
                return empleado.getDireccion();
            case 4:
                return empleado.getTelefono();
            case 5:
                return empleado.getFechaNacimiento();
            default:
                return null;
        }
    }

    @Override
    public String getColumnName(int column) {
        return columnNames[column];
    }
}

class VentanaActualizar extends JFrame {

    private JTextField campoNombre;
    private JTextField campoApellido;
    private JTextField campoDireccion;
    private JTextField campoTelefono;
    private JTextField campoFechaNacimiento;
    private JButton botonGuardar;
    private Empleado empleado;
    private verEmpleados ventanaPrincipal;

    public VentanaActualizar(Empleado empleado, verEmpleados ventanaPrincipal) {
        super("Actualizar Datos del Empleado");
        this.empleado = empleado;
        this.ventanaPrincipal = ventanaPrincipal;

        // Configurar el diseño de la interfaz
        setLayout(new GridLayout(7, 6));

        add(new JLabel("ID Empleado:"));
        add(new JLabel(String.valueOf(empleado.getIdEmpleado())));

        add(new JLabel("Nombre:"));
        campoNombre = new JTextField(empleado.getNombre());
        agregarFiltroSoloLetras(campoNombre); // Agrega el filtro para permitir solo letras
        add(campoNombre);

        add(new JLabel("Apellido:"));
        campoApellido = new JTextField(empleado.getApellido());
        agregarFiltroSoloLetras(campoApellido); // Agrega el filtro para permitir solo letras
        add(campoApellido);

        add(new JLabel("Dirección:"));
        campoDireccion = new JTextField(empleado.getDireccion());
        add(campoDireccion);

        add(new JLabel("Teléfono:"));
        campoTelefono = new JTextField(empleado.getTelefono());
        agregarFiltroSoloNumeros(campoTelefono, 9); // Límite de 9 caracteres
        add(campoTelefono);

        add(new JLabel("Fecha de Nacimiento: YYYY-MM-DD"));
        campoFechaNacimiento = new JTextField(empleado.getFechaNacimiento());
        agregarFiltroSoloNumeros(campoFechaNacimiento, 10); // Límite de 10 caracteres
        add(campoFechaNacimiento);

        botonGuardar = new JButton("Guardar Cambios");
        botonGuardar.addActionListener(e -> guardarCambios());
        add(botonGuardar);

        // Configurar la ventana
        setSize(500, 300);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Cierra solo esta ventana al presionar el botón de cerrar
        setLocationRelativeTo(ventanaPrincipal); // Centrar la ventana con respecto a la ventana principal
        setVisible(true);
    }

    private void guardarCambios() {
        try {
            Connection conexion = Conexion.obtenerConexion();

            // Llamar al procedimiento almacenado para actualizar los datos del empleado
            String procedimiento = "{CALL sp_ActualizarEmpleado(?, ?, ?, ?, ?, ?)}";
            try (CallableStatement cstmt = conexion.prepareCall(procedimiento)) {
                // Establecer los parámetros del procedimiento almacenado
                cstmt.setInt(1, empleado.getIdEmpleado());
                cstmt.setString(2, campoNombre.getText());
                cstmt.setString(3, campoApellido.getText());
                cstmt.setString(4, campoDireccion.getText());
                cstmt.setString(5, campoTelefono.getText());
                cstmt.setString(6, campoFechaNacimiento.getText());

                // Ejecutar el procedimiento almacenado
                boolean resultado = cstmt.execute();

                if (!resultado) {
                    JOptionPane.showMessageDialog(this, "Cambios guardados correctamente");
                    // Actualizar la tabla en la ventana principal
                    ventanaPrincipal.actualizarTabla();
                    dispose(); // Cierra la ventana después de guardar los cambios
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo guardar los cambios. Inténtalo nuevamente.");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void agregarFiltroSoloLetras(JTextField textField) {
        AbstractDocument document = (AbstractDocument) textField.getDocument();
        document.setDocumentFilter(new DocumentFilter() {
            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                if (esCadenaValida(text)) {
                    super.replace(fb, offset, length, text, attrs);
                } else {
                    Toolkit.getDefaultToolkit().beep();
                }
            }
        });
    }

    private void agregarFiltroSoloNumeros(JTextField textField, int limite) {
        AbstractDocument document = (AbstractDocument) textField.getDocument();
        document.setDocumentFilter(new DocumentFilter() {
            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                if (esNumeroValido(text) && (fb.getDocument().getLength() + text.length() - length) <= limite) {
                    super.replace(fb, offset, length, text, attrs);
                } else {
                    Toolkit.getDefaultToolkit().beep();
                }
            }
        });
    }

    private boolean esNumeroValido(String numero) {
        return numero.matches("\\d*");
    }

    private boolean esCadenaValida(String cadena) {
        return cadena.matches("[a-zA-Z]+");
    }

}
